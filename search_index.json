[["index.html", "Supplemental info about phylodiversity in evolutionary computation Chapter 1 Introduction", " Supplemental info about phylodiversity in evolutionary computation Jose Guadalupe Hernandez, Alexander Lalejini, Emily Dolson 2021-09-05 Chapter 1 Introduction Check out the GitHub repository with all the gears and levers to generate this example: https://github.com/amlalejini/auto-deploying-bookdown-example. If you want to know more about R markdown, check out R Markdown: The Definitive Guide (Xie, Allaire, and Grolemund 2019). References "],["setup.html", "Chapter 2 Setup", " Chapter 2 Setup Include dependencies library(ggplot2) # For plotting library(tidyverse) # For data wrangling library(knitr) # For making nice rmarkdown documents library(cowplot) # For theme library(viridis) # For color scale library(RColorBrewer) # For more color scales library(rstatix) library(ggsignif) # For adding pairwise significance to plots library(Hmisc) # For bootstrapping condifence internvals library(kableExtra) # For displaying nice tables source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) # For raincloud plots library(readr) # For reading in data library(stringr) # For manipulating string data library(ggpubr) # For displaying correlation statistics on plots library(infotheo) # For causality analysis library(scales) # For displaying scales nicely in facetted plots library(osfr) # For downloading the data for this project These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-apple-darwin17.0 ## arch x86_64 ## os darwin17.0 ## system x86_64, darwin17.0 ## status ## major 4 ## minor 1.1 ## year 2021 ## month 08 ## day 10 ## svn rev 80725 ## language R ## version.string R version 4.1.1 (2021-08-10) ## nickname Kick Things Setup constants to be used across plots # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 # Common graph variables performance_ylim &lt;- 1 coverage_ylim &lt;- 1.0 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) # Read in data osf_retrieve_file(&quot;esm4r&quot;) %&gt;% osf_download(conflicts = &quot;skip&quot;) # Download data from osf ## # A tibble: 1 × 4 ## name id local_path meta ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; ## 1 final_exploration_diagnostic_data.csv 612fe97aab… ./final_exploratio… &lt;named … data_loc &lt;- &quot;final_exploration_diagnostic_data.csv&quot; data &lt;- read_csv(data_loc, na=c(&quot;NONE&quot;, &quot;NA&quot;, &quot;&quot;)) ## Clean up data columns # Make selection name column human readable data &lt;- data %&gt;% mutate(selection_name = as.factor(case_when( selection_name == &quot;EpsilonLexicase&quot; ~ &quot;Lexicase&quot;, TOUR_SIZE == 1 ~ &quot;Random&quot;, selection_name == &quot;Tournament&quot; ~ &quot;Tournament&quot;, selection_name == &quot;FitnessSharing&quot; ~ &quot;Fitness Sharing&quot;, selection_name == &quot;EcoEa&quot; ~ &quot;EcoEA&quot; ))) # Calculate performance statistics. # Elite trait avg is the avg per-site performance of the best individual data$elite_trait_avg &lt;- data$ele_agg_per / data$OBJECTIVE_CNT data$unique_start_positions_coverage &lt;- data$uni_str_pos / data$OBJECTIVE_CNT # Convert elite_trait_avg to percent of maximum possible data$elite_trait_avg &lt;- data$elite_trait_avg/data$TARGET # Grab data from just the final time point final_data &lt;- filter(data, evaluations==max(data$evaluations)) "],["performance.html", "Chapter 3 Performance 3.1 Over time 3.2 Final", " Chapter 3 Performance For context, it’s important to know how each selection scheme performed on the exploration diagnostic. 3.1 Over time First we look at the dynamics of performance over time. 3.1.0.1 Trait performance Plot average trait performance (i.e. fitness) over time for each selection scheme. We log the x-axis because Eco-EA gains fitness over a very long time scale, whereas the interesting dynamics for the other selection schemes occur relatively quickly. ggplot( data, aes( x=gen, # Generations y=elite_trait_avg, # Performance color=selection_name, # Selection scheme fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + # Plot line showing mean for each selection scheme stat_summary( # Add shading around each line indicating 95% confiedence interval geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, # Set y axis title limits=c(0, performance_ylim) # Set y axis range to include all possible performance values ) + scale_x_log10( # Log x axis name=&quot;Generation&quot; # Set x axis title ) + scale_color_discrete(&quot;Selection&quot;) + # Set legend title scale_fill_discrete(&quot;Selection&quot;) # Set legend title As observed by Hernandez et al. in their original paper on the exploration diagnostic, fitness in tournament selection initially increases quickly and then plateaus. Fitness in lexicase selection increases slightly slower but plateaus at a much higher value (nearly 100%). Fitness sharing behaves similarly to tournament selection, but maintains a slight upward trajectory (note that, because the x axis is on a log scale, this trajectory is very gradual). Eco-EA takes substantially longer to increase in fitness but ultimately surpasses fitness sharing and tournament selection. It is unclear whether it would pass lexicase selection if these runs were allowed to continue for slightly longer; they do not appear to have plateaued yet. We chose to cut them off at 500,000 generations due to resource constraints and the fact that the questions we’re asking here are not really about final fitness. 3.1.0.2 Activation position coverage Out of curiosity, we also ran the analysis of unique activation positions present in the population, used by Hernandez et. al. This analysis tells us about the diversity of start positions for the coding region represented in the population. As the set of start positions in the population tends to represent a meaningful constraint on the number of paths through the fitness landscape that are currently accessible, this is in some sense a metric of useful diversity in the population ggplot(data, aes(x=gen, y=unique_start_positions_coverage, color=selection_name, fill=selection_name)) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, 100) ) + scale_x_log10( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;)+ scale_fill_discrete(&quot;Selection&quot;) We see that lexicase selection maintains by far that largest number of unique start positions, even surpassing the number maintained by random drift. This suggests that lexicase selection is actively selecting for maintaining a diversity of start positions. Tournament selection and fitness sharing perform virtually identically, with Eco-EA falling in between. 3.2 Final While trends over time are more informative, it can be hard to visualize the full distribution (particularly the extent of variation). Thus, we also conduct a more detailed analysis of performance at the final time point. 3.2.0.1 Trait performance First we conduct statistics to identify which selection schemes are significantly different from each other. # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(elite_trait_avg ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% # Apply Bonferroni correction for multiple comparisons add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) Then we make raincloud plots of each selection scheme. elite_final_performance_fig &lt;- ggplot( final_data, aes( x=selection_name, y=elite_trait_avg, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Average trait performance&quot;, limits=c(0, performance_ylim) ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position=&quot;none&quot;) elite_final_performance_fig These observations look fairly consistent with the timeseries plots. Next, we output the results of our significance testing. stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label elite_trait_avg EcoEA Fitness Sharing 50 50 1561 3.20e-02 3.20e-01 ns 1.922000 EcoEA , Fitness Sharing 1 2 p = 0.32 elite_trait_avg EcoEA Lexicase 50 47 60 0.00e+00 0.00e+00 **** 2.946444 EcoEA , Lexicase 1 3 p &lt; 1e-04 elite_trait_avg EcoEA Random 50 50 2500 0.00e+00 0.00e+00 **** 3.970889 EcoEA , Random 1 4 p &lt; 1e-04 elite_trait_avg EcoEA Tournament 50 50 1939 2.10e-06 2.07e-05 **** 4.995333 EcoEA , Tournament 1 5 p &lt; 1e-04 elite_trait_avg Fitness Sharing Lexicase 50 47 593 2.69e-05 2.69e-04 *** 6.019778 Fitness Sharing, Lexicase 2 3 p = 0.000269 elite_trait_avg Fitness Sharing Random 50 50 2500 0.00e+00 0.00e+00 **** 7.044222 Fitness Sharing, Random 2 4 p &lt; 1e-04 elite_trait_avg Fitness Sharing Tournament 50 50 1549 4.00e-02 4.00e-01 ns 8.068667 Fitness Sharing, Tournament 2 5 p = 0.4 elite_trait_avg Lexicase Random 47 50 2350 0.00e+00 0.00e+00 **** 9.093111 Lexicase, Random 3 4 p &lt; 1e-04 elite_trait_avg Lexicase Tournament 47 50 2098 0.00e+00 0.00e+00 **** 10.117556 Lexicase , Tournament 3 5 p &lt; 1e-04 elite_trait_avg Random Tournament 50 50 10 0.00e+00 0.00e+00 **** 11.142000 Random , Tournament 4 5 p &lt; 1e-04 3.2.0.2 Final activation position Coverage Now we do the same analysis for final activation position coverage. First we calculate the statistics # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(unique_start_positions_coverage ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$manual_position &lt;- stat.test$y.position * 1.05 stat.test$label &lt;- mapply(p_label,stat.test$p.adj) Then we make raincloud plots unique_start_positions_coverage_final_fig &lt;- ggplot( final_data, aes( x=selection_name, y=unique_start_positions_coverage, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Activation position coverage&quot;, limits=c(0, coverage_ylim) ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme( legend.position=&quot;none&quot; ) unique_start_positions_coverage_final_fig These also look unsurprising. Lastly, we output the results of significance testing. stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax manual_position label unique_start_positions_coverage EcoEA Fitness Sharing 50 50 2392.5 0.000 0 **** 1.420000 EcoEA , Fitness Sharing 1 2 1.491000 p &lt; 1e-04 unique_start_positions_coverage EcoEA Lexicase 50 47 0.0 0.000 0 **** 2.175556 EcoEA , Lexicase 1 3 2.284333 p &lt; 1e-04 unique_start_positions_coverage EcoEA Random 50 50 339.0 0.000 0 **** 2.931111 EcoEA , Random 1 4 3.077667 p &lt; 1e-04 unique_start_positions_coverage EcoEA Tournament 50 50 2387.0 0.000 0 **** 3.686667 EcoEA , Tournament 1 5 3.871000 p &lt; 1e-04 unique_start_positions_coverage Fitness Sharing Lexicase 50 47 0.0 0.000 0 **** 4.442222 Fitness Sharing, Lexicase 2 3 4.664333 p &lt; 1e-04 unique_start_positions_coverage Fitness Sharing Random 50 50 25.0 0.000 0 **** 5.197778 Fitness Sharing, Random 2 4 5.457667 p &lt; 1e-04 unique_start_positions_coverage Fitness Sharing Tournament 50 50 1274.5 0.708 1 ns 5.953333 Fitness Sharing, Tournament 2 5 6.251000 p = 1 unique_start_positions_coverage Lexicase Random 47 50 2350.0 0.000 0 **** 6.708889 Lexicase, Random 3 4 7.044333 p &lt; 1e-04 unique_start_positions_coverage Lexicase Tournament 47 50 2350.0 0.000 0 **** 7.464444 Lexicase , Tournament 3 5 7.837667 p &lt; 1e-04 unique_start_positions_coverage Random Tournament 50 50 2475.5 0.000 0 **** 8.220000 Random , Tournament 4 5 8.631000 p &lt; 1e-04 "],["phylogenetic-diversity.html", "Chapter 4 Phylogenetic diversity 4.1 Over time 4.2 Final", " Chapter 4 Phylogenetic diversity Next, we analyze the behavior of phylogenetic diversity on the exploration diagnostic. 4.1 Over time First we plot mean pairwise distance over time. We log the y axis because there is such variation in mean pairwise distance across selection schemes. ggplot( data, aes( x=gen, y=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_log10( name=&quot;Mean pairwise distance&quot; ) + scale_x_log10( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) Lexicase selection maintains a monotonic increase in phylogenetic diversity over the course of the entire experiment. It likely never experiences a full coalesence event (where the most-recent common ancestor changes). Eco-EA nearly keeps pace with lexicase selection until towards the end, when its phylogenetic diversity crashes. This is likely the result of selective sweeps that begin to occur as the population discovers high fitness solutions. Fitness sharing shows a slight dip at the same time that its fitness plateaus (likely also the result of a selective sweep), but phylogenetic diversity recovers afterwards, making for a relatively constant level. over time. Tournament selection, on the other hand, maintains the same (low) level of phylogenetic diversity as fitness sharing, up until the point that fitness plateaus, at which point tournament selection’s phylodiversity drops to nearly 0. Interestingly, lexicase selection and Eco-EA both maintain more phylodiversity than random selection, whereas fitness sharing and tournament selection maintain less. For comparison, we make the same plot with mean evolutionary distinctiveness. ggplot( data, aes( x=gen, y=mean_phenotype_evolutionary_distinctiveness, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_log10( name=&quot;Mean evolutionary distinctiveness&quot; ) + scale_x_log10( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) 4.2 Final Next, we perform a more in-depth analysis of phylodiversity distributions at the final time point. 4.2.0.1 Mean pairwise distance # Pairwise wilcoxon teset to determine which conditions are significantly different from each other stat.test &lt;- final_data %&gt;% wilcox_test(mean_phenotype_pairwise_distance ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) # Output stats stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label mean_phenotype_pairwise_distance EcoEA Fitness Sharing 50 50 1824.0 7.70e-05 7.70e-04 *** 49488.81 EcoEA , Fitness Sharing 1 2 p = 0.00077 mean_phenotype_pairwise_distance EcoEA Lexicase 50 47 227.0 0.00e+00 0.00e+00 **** 76981.49 EcoEA , Lexicase 1 3 p &lt; 1e-04 mean_phenotype_pairwise_distance EcoEA Random 50 50 690.0 1.15e-04 1.15e-03 ** 104474.18 EcoEA , Random 1 4 p = 0.00115 mean_phenotype_pairwise_distance EcoEA Tournament 50 50 2500.0 0.00e+00 0.00e+00 **** 131966.86 EcoEA , Tournament 1 5 p &lt; 1e-04 mean_phenotype_pairwise_distance Fitness Sharing Lexicase 50 47 0.0 0.00e+00 0.00e+00 **** 159459.54 Fitness Sharing, Lexicase 2 3 p &lt; 1e-04 mean_phenotype_pairwise_distance Fitness Sharing Random 50 50 536.0 9.00e-07 8.70e-06 **** 186952.22 Fitness Sharing, Random 2 4 p &lt; 1e-04 mean_phenotype_pairwise_distance Fitness Sharing Tournament 50 50 2232.5 0.00e+00 0.00e+00 **** 214444.90 Fitness Sharing, Tournament 2 5 p &lt; 1e-04 mean_phenotype_pairwise_distance Lexicase Random 47 50 2350.0 0.00e+00 0.00e+00 **** 241937.58 Lexicase, Random 3 4 p &lt; 1e-04 mean_phenotype_pairwise_distance Lexicase Tournament 47 50 2350.0 0.00e+00 0.00e+00 **** 269430.26 Lexicase , Tournament 3 5 p &lt; 1e-04 mean_phenotype_pairwise_distance Random Tournament 50 50 2500.0 0.00e+00 0.00e+00 **** 296922.94 Random , Tournament 4 5 p &lt; 1e-04 # Raincloud plot of final mean pairwise distance final_phylogeny_fig &lt;- ggplot( final_data, aes( x=selection_name, y=mean_phenotype_pairwise_distance, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_log10( name=&quot;Mean pairwise distance&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) final_phylogeny_fig This shows something interesting! Final phylogenetic diversity in Eco-EA is heavily bimodal. In later analysis, we will see that the runs with high phylogenetic diversity are the ones with lower fitness, suggesting that they have no yet experienced a selective sweep resulting from the discovery of a high-fitness solution. 4.2.0.2 Mean evolutionary distinctiveness # Pairwise wilcoxon teset to determine which conditions are significantly different from each other stat.test &lt;- final_data %&gt;% wilcox_test(mean_phenotype_evolutionary_distinctiveness ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) # Output stats stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label mean_phenotype_evolutionary_distinctiveness EcoEA Fitness Sharing 50 50 469 1.00e-07 7.00e-07 **** 289111.7 EcoEA , Fitness Sharing 1 2 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness EcoEA Lexicase 50 47 0 0.00e+00 0.00e+00 **** 449625.8 EcoEA , Lexicase 1 3 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness EcoEA Random 50 50 711 2.05e-04 2.05e-03 ** 610140.0 EcoEA , Random 1 4 p = 0.00205 mean_phenotype_evolutionary_distinctiveness EcoEA Tournament 50 50 569 2.70e-06 2.72e-05 **** 770654.1 EcoEA , Tournament 1 5 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness Fitness Sharing Lexicase 50 47 100 0.00e+00 0.00e+00 **** 931168.2 Fitness Sharing, Lexicase 2 3 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness Fitness Sharing Random 50 50 2428 0.00e+00 0.00e+00 **** 1091682.4 Fitness Sharing, Random 2 4 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness Fitness Sharing Tournament 50 50 1614 1.20e-02 1.20e-01 ns 1252196.5 Fitness Sharing, Tournament 2 5 p = 0.12 mean_phenotype_evolutionary_distinctiveness Lexicase Random 47 50 2350 0.00e+00 0.00e+00 **** 1412710.6 Lexicase, Random 3 4 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness Lexicase Tournament 47 50 2255 0.00e+00 0.00e+00 **** 1573224.7 Lexicase , Tournament 3 5 p &lt; 1e-04 mean_phenotype_evolutionary_distinctiveness Random Tournament 50 50 173 0.00e+00 0.00e+00 **** 1733738.9 Random , Tournament 4 5 p &lt; 1e-04 # Raincloud plot of final mean evolutionary distinctiveness ggplot( final_data, aes( x=selection_name, y=mean_phenotype_evolutionary_distinctiveness, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_log10( name=&quot;Mean evolutionary distinctiveness&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) "],["phenotypic-diversity.html", "Chapter 5 Phenotypic diversity 5.1 Relationship between different types of phenotypic diversity 5.2 Over time 5.3 Final", " Chapter 5 Phenotypic diversity 5.1 Relationship between different types of phenotypic diversity ggplot( data %&gt;% filter(gen==500000), aes( y=phen_diversity, x=phen_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic shannon diversity&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot;, breaks = breaks_extended(4) ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) 5.2 Over time ggplot( data, aes( x=gen, y=phen_num_taxa, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Phenotypic richness&quot; ) + scale_x_log10( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) In contrast to the phylodiversity results, phenotypic richness in all selection schemes (even tournament selection) ultimately exceeds that of random selection. Eco-EA monotonically increases while lexicase selection reaches a maximum around the same time it reaches its fitness plateau. The only real similarity to the phylodiversity results is the behavior tournament selection and fitness sharing relative to each other. We also looked at phenotypic shannon entropy: ggplot( data, aes( x=gen, y=phen_diversity, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Phenotypic Shannon entropy&quot; ) + scale_x_log10( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) 5.3 Final 5.3.0.1 Richness # Determine which conditions are significantly diferrent from each other stat.test &lt;- final_data %&gt;% wilcox_test(phen_num_taxa ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label phen_num_taxa EcoEA Fitness Sharing 50 50 2249.0 0.00e+00 0.0e+00 **** 326 EcoEA , Fitness Sharing 1 2 p &lt; 1e-04 phen_num_taxa EcoEA Lexicase 50 47 2319.0 0.00e+00 0.0e+00 **** 456 EcoEA , Lexicase 1 3 p &lt; 1e-04 phen_num_taxa EcoEA Random 50 50 2500.0 0.00e+00 0.0e+00 **** 586 EcoEA , Random 1 4 p &lt; 1e-04 phen_num_taxa EcoEA Tournament 50 50 2378.5 0.00e+00 0.0e+00 **** 716 EcoEA , Tournament 1 5 p &lt; 1e-04 phen_num_taxa Fitness Sharing Lexicase 50 47 1428.0 6.80e-02 6.8e-01 ns 846 Fitness Sharing, Lexicase 2 3 p = 0.68 phen_num_taxa Fitness Sharing Random 50 50 1973.0 6.00e-07 6.3e-06 **** 976 Fitness Sharing, Random 2 4 p &lt; 1e-04 phen_num_taxa Fitness Sharing Tournament 50 50 1585.0 2.10e-02 2.1e-01 ns 1106 Fitness Sharing, Tournament 2 5 p = 0.21 phen_num_taxa Lexicase Random 47 50 2339.5 0.00e+00 0.0e+00 **** 1236 Lexicase, Random 3 4 p &lt; 1e-04 phen_num_taxa Lexicase Tournament 47 50 1359.0 1.85e-01 1.0e+00 ns 1366 Lexicase , Tournament 3 5 p = 1 phen_num_taxa Random Tournament 50 50 797.0 2.00e-03 2.0e-02 1496 Random , Tournament 4 5 p = 0.02 # Raincloud plot of final phenotypic diversity final_phenotypic_fig &lt;- ggplot( final_data, aes( x=selection_name, y=phen_num_taxa, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Phenotypic Richness&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) final_phenotypic_fig Nothing particularly suprising here, but we should note that, based on the over time plot, this would look a lot different if we had selected a different time point. 5.3.0.2 Shannon diversity # Determine which conditions are significantly diferrent from each other stat.test &lt;- final_data %&gt;% wilcox_test(phen_diversity~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label phen_diversity EcoEA Fitness Sharing 50 50 2478.0 0.00e+00 0.00e+00 **** 9.602 EcoEA , Fitness Sharing 1 2 p &lt; 1e-04 phen_diversity EcoEA Lexicase 50 47 1772.0 1.66e-05 1.66e-04 *** 13.012 EcoEA , Lexicase 1 3 p = 0.000166 phen_diversity EcoEA Random 50 50 2089.5 0.00e+00 1.00e-07 **** 16.422 EcoEA , Random 1 4 p &lt; 1e-04 phen_diversity EcoEA Tournament 50 50 2496.0 0.00e+00 0.00e+00 **** 19.832 EcoEA , Tournament 1 5 p &lt; 1e-04 phen_diversity Fitness Sharing Lexicase 50 47 0.0 0.00e+00 0.00e+00 **** 23.242 Fitness Sharing, Lexicase 2 3 p &lt; 1e-04 phen_diversity Fitness Sharing Random 50 50 0.0 0.00e+00 0.00e+00 **** 26.652 Fitness Sharing, Random 2 4 p &lt; 1e-04 phen_diversity Fitness Sharing Tournament 50 50 1856.0 2.99e-05 2.99e-04 *** 30.062 Fitness Sharing, Tournament 2 5 p = 0.000299 phen_diversity Lexicase Random 47 50 1714.0 1.01e-04 1.01e-03 ** 33.472 Lexicase, Random 3 4 p = 0.00101 phen_diversity Lexicase Tournament 47 50 2350.0 0.00e+00 0.00e+00 **** 36.882 Lexicase , Tournament 3 5 p &lt; 1e-04 phen_diversity Random Tournament 50 50 2500.0 0.00e+00 0.00e+00 **** 40.292 Random , Tournament 4 5 p &lt; 1e-04 # Raincloud plot of final phenotypic diversity ggplot( final_data, aes( x=selection_name, y=phen_num_taxa, fill=selection_name ) ) + geom_flat_violin( position = position_nudge(x = .2, y = 0), alpha = .8, scale=&quot;width&quot; ) + geom_point( mapping=aes(color=selection_name), position = position_jitter(width = .15), size = .5, alpha = 0.8 ) + geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) + scale_y_continuous( name=&quot;Phenotypic Shannon Diversity&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) "],["relationship-between-phenotypic-and-phylogenetic-diversity.html", "Chapter 6 Relationship between phenotypic and phylogenetic diversity", " Chapter 6 Relationship between phenotypic and phylogenetic diversity ggplot( data %&gt;% filter(gen==500000), aes( y=phen_num_taxa, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic richness&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot;, breaks = breaks_extended(4) ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( data %&gt;% filter(gen==500000), aes( y=phen_num_taxa, x=mean_phenotype_evolutionary_distinctiveness, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic richness&quot; ) + scale_x_continuous( name=&quot;Mean evolutionary distinctiveness&quot;, breaks = breaks_extended(4) ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( data %&gt;% filter(gen==500000), aes( y=phen_diversity, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic shannon diversity&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot;, breaks = breaks_extended(4) ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( data %&gt;% filter(gen==500000), aes( y=phen_diversity, x=mean_phenotype_evolutionary_distinctiveness, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic shannon diversity&quot; ) + scale_x_continuous( name=&quot;Mean evolutionary distinctiveness&quot;, breaks = breaks_extended(4) ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) "],["relationship-between-diversity-and-success.html", "Chapter 7 Relationship between diversity and success 7.1 Earlier in run 7.2 End of run", " Chapter 7 Relationship between diversity and success 7.1 Earlier in run ggplot( data %&gt;% filter(gen==25000), aes( y=elite_trait_avg, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( data %&gt;% filter(gen==25000), aes( y=elite_trait_avg, x=phen_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) phylogney_vs_performance &lt;- ggplot( data %&gt;% filter(gen==50000), aes( y=elite_trait_avg, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) phylogney_vs_performance richness_vs_performance &lt;- ggplot( data %&gt;% filter(gen==50000), aes( y=elite_trait_avg, x=phen_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) richness_vs_performance 7.2 End of run final_phylogney_vs_performance &lt;- ggplot( final_data, aes( y=elite_trait_avg, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) final_phylogney_vs_performance final_richness_vs_performance &lt;- ggplot( final_data, aes( y=elite_trait_avg, x=phen_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) final_richness_vs_performance "],["causality-analysis.html", "Chapter 8 Causality analysis 8.1 Transfer entropy from diversity to fitness 8.2 Transfer entropy between types of diversity", " Chapter 8 Causality analysis 8.1 Transfer entropy from diversity to fitness 8.1.0.1 Max pairwise distance vs. phenotypic richness # Calculate transfer entropy for max pairwise distance # Time points are 10 generations, so calculating lag 1 gives us lag 10 res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10 discretize(lag(max_phenotype_pairwise_distance, 1)), discretize(lag(elite_trait_avg, 1))), fit_phylo_100 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100 discretize(lag(max_phenotype_pairwise_distance, 10)), discretize(lag(elite_trait_avg, 10))), fit_phylo_1000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 1000 discretize(lag(max_phenotype_pairwise_distance, 100)), discretize(lag(elite_trait_avg, 100))), fit_phylo_10000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10000 discretize(lag(max_phenotype_pairwise_distance, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_phylo_100000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100000 discretize(lag(max_phenotype_pairwise_distance, 10000)), discretize(lag(elite_trait_avg, 10000))), fit_fit_10000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 1000)), discretize(lag(max_phenotype_pairwise_distance, 1000))), fit_fit_100000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 10000)), discretize(lag(max_phenotype_pairwise_distance, 10000))), fit_pheno_10 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10 discretize(lag(phen_num_taxa, 1)), discretize(lag(elite_trait_avg, 1))), fit_pheno_100 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100 discretize(lag(phen_num_taxa, 10)), discretize(lag(elite_trait_avg, 10))), fit_pheno_1000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 1000 discretize(lag(phen_num_taxa, 100)), discretize(lag(elite_trait_avg, 100))), fit_pheno_10000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10000 discretize(lag(phen_num_taxa, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_pheno_100000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100000 discretize(lag(phen_num_taxa, 10000)), discretize(lag(elite_trait_avg, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) # Plot transfer entropy ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.1.0.2 Mean pairwise distance vs. phenotypic richness # Calculate transfer entropy for mean pairwise distance # Time points are 10 generations, so calculating lag 1 gives us lag 10 res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10 discretize(lag(mean_phenotype_pairwise_distance, 1)), discretize(lag(elite_trait_avg, 1))), fit_phylo_100 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100 discretize(lag(mean_phenotype_pairwise_distance, 10)), discretize(lag(elite_trait_avg, 10))), fit_phylo_1000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 1000 discretize(lag(mean_phenotype_pairwise_distance, 100)), discretize(lag(elite_trait_avg, 100))), fit_phylo_10000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10000 discretize(lag(mean_phenotype_pairwise_distance, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_phylo_100000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100000 discretize(lag(mean_phenotype_pairwise_distance, 10000)), discretize(lag(elite_trait_avg, 10000))), fit_fit_10000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 1000)), discretize(lag(mean_phenotype_pairwise_distance, 1000))), fit_fit_100000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 10000)), discretize(lag(mean_phenotype_pairwise_distance, 10000))), fit_pheno_10 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10 discretize(lag(phen_num_taxa, 1)), discretize(lag(elite_trait_avg, 1))), fit_pheno_100 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100 discretize(lag(phen_num_taxa, 10)), discretize(lag(elite_trait_avg, 10))), fit_pheno_1000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 1000 discretize(lag(phen_num_taxa, 100)), discretize(lag(elite_trait_avg, 100))), fit_pheno_10000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10000 discretize(lag(phen_num_taxa, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_pheno_100000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100000 discretize(lag(phen_num_taxa, 10000)), discretize(lag(elite_trait_avg, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) # Plot transfer entropy ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.1.0.3 Mean pairwise distance vs. shannon entropy # Calculate transfer entropy for mean pairwise distance # Time points are 10 generations, so calculating lag 1 gives us lag 10 res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10 discretize(lag(mean_phenotype_pairwise_distance, 1)), discretize(lag(elite_trait_avg, 1))), fit_phylo_100 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100 discretize(lag(mean_phenotype_pairwise_distance, 10)), discretize(lag(elite_trait_avg, 10))), fit_phylo_1000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 1000 discretize(lag(mean_phenotype_pairwise_distance, 100)), discretize(lag(elite_trait_avg, 100))), fit_phylo_10000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10000 discretize(lag(mean_phenotype_pairwise_distance, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_phylo_100000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100000 discretize(lag(mean_phenotype_pairwise_distance, 10000)), discretize(lag(elite_trait_avg, 10000))), fit_fit_10000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 1000)), discretize(lag(mean_phenotype_pairwise_distance, 1000))), fit_fit_100000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 10000)), discretize(lag(mean_phenotype_pairwise_distance, 10000))), fit_pheno_10 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10 discretize(lag(phen_diversity, 1)), discretize(lag(elite_trait_avg, 1))), fit_pheno_100 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100 discretize(lag(phen_diversity, 10)), discretize(lag(elite_trait_avg, 10))), fit_pheno_1000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 1000 discretize(lag(phen_diversity, 100)), discretize(lag(elite_trait_avg, 100))), fit_pheno_10000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10000 discretize(lag(phen_diversity, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_pheno_100000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100000 discretize(lag(phen_diversity, 10000)), discretize(lag(elite_trait_avg, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) # Plot transfer entropy ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.1.0.4 Mean evolutionary distinctiveness vs. phenotypic richness # Calculate transfer entropy for mean evolutionary distinctiveness # Time points are 10 generations, so calculating lag 1 gives us lag 10 res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(elite_trait_avg, 1))), fit_phylo_100 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(elite_trait_avg, 10))), fit_phylo_1000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 1000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(elite_trait_avg, 100))), fit_phylo_10000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_phylo_100000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000)), discretize(lag(elite_trait_avg, 10000))), fit_fit_10000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 1000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000))), fit_fit_100000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 10000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000))), fit_pheno_10 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10 discretize(lag(phen_num_taxa, 1)), discretize(lag(elite_trait_avg, 1))), fit_pheno_100 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100 discretize(lag(phen_num_taxa, 10)), discretize(lag(elite_trait_avg, 10))), fit_pheno_1000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 1000 discretize(lag(phen_num_taxa, 100)), discretize(lag(elite_trait_avg, 100))), fit_pheno_10000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10000 discretize(lag(phen_num_taxa, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_pheno_100000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100000 discretize(lag(phen_num_taxa, 10000)), discretize(lag(elite_trait_avg, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) # Plot transfer entropy ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.1.0.5 Mean evolutionary distinctiveness vs. shannon entropy # Calculate transfer entropy for mean evolutionary distinctiveness # Time points are 10 generations, so calculating lag 1 gives us lag 10 res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(elite_trait_avg, 1))), fit_phylo_100 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(elite_trait_avg, 10))), fit_phylo_1000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 1000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(elite_trait_avg, 100))), fit_phylo_10000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 10000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_phylo_100000 = condinformation(discretize(elite_trait_avg), # TE phylo -&gt; fit, lag 100000 discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000)), discretize(lag(elite_trait_avg, 10000))), fit_fit_10000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 1000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000))), fit_fit_100000 = condinformation(discretize(elite_trait_avg), # Mutual info btwn. fit and lagged fit discretize(lag(elite_trait_avg, 10000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000))), fit_pheno_10 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10 discretize(lag(phen_diversity, 1)), discretize(lag(elite_trait_avg, 1))), fit_pheno_100 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100 discretize(lag(phen_diversity, 10)), discretize(lag(elite_trait_avg, 10))), fit_pheno_1000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 1000 discretize(lag(phen_diversity, 100)), discretize(lag(elite_trait_avg, 100))), fit_pheno_10000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 10000 discretize(lag(phen_diversity, 1000)), discretize(lag(elite_trait_avg, 1000))), fit_pheno_100000 = condinformation(discretize(elite_trait_avg), # TE pheno -&gt; fit, lag 100000 discretize(lag(phen_diversity, 10000)), discretize(lag(elite_trait_avg, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) # Plot transfer entropy ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.2 Transfer entropy between types of diversity 8.2.0.1 Max pairwise distance and phenotypic richness res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( phen_phylo_10 = condinformation(discretize(phen_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 1)), discretize(lag(phen_num_taxa, 1))), phen_phylo_100 = condinformation(discretize(phen_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 10)), discretize(lag(phen_num_taxa, 10))), pheno_phylo_1000 = condinformation(discretize(phen_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 100)), discretize(lag(phen_num_taxa, 100))), pheno_phylo_10000 = condinformation(discretize(phen_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 1000)), discretize(lag(phen_num_taxa, 1000))), pheno_phylo_100000 = condinformation(discretize(phen_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 10000)), discretize(lag(phen_num_taxa, 10000))), phylo_pheno_10 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 1)), discretize(lag(max_phenotype_pairwise_distance, 1))), phylo_pheno_100 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 10)), discretize(lag(max_phenotype_pairwise_distance, 10))), phylo_pheno_1000 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 100)), discretize(lag(max_phenotype_pairwise_distance, 100))), phylo_pheno_10000 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 1000)), discretize(lag(max_phenotype_pairwise_distance, 1000))), phylo_pheno_100000 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 10000)), discretize(lag(max_phenotype_pairwise_distance, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;\\nPhenotypic\\n\\t-&gt;\\nPhylogenetic\\n&quot;, TRUE ~ &quot;\\nPhylogenetic\\n\\t-&gt;\\nPhenotypic\\n&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.2.0.2 Mean pairwise distance and phenotypic richness res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( phen_phylo_10 = condinformation(discretize(phen_num_taxa), discretize(lag(mean_phenotype_pairwise_distance, 1)), discretize(lag(phen_num_taxa, 1))), phen_phylo_100 = condinformation(discretize(phen_num_taxa), discretize(lag(mean_phenotype_pairwise_distance, 10)), discretize(lag(phen_num_taxa, 10))), pheno_phylo_1000 = condinformation(discretize(phen_num_taxa), discretize(lag(mean_phenotype_pairwise_distance, 100)), discretize(lag(phen_num_taxa, 100))), pheno_phylo_10000 = condinformation(discretize(phen_num_taxa), discretize(lag(mean_phenotype_pairwise_distance, 1000)), discretize(lag(phen_num_taxa, 1000))), pheno_phylo_100000 = condinformation(discretize(phen_num_taxa), discretize(lag(mean_phenotype_pairwise_distance, 10000)), discretize(lag(phen_num_taxa, 10000))), phylo_pheno_10 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 1)), discretize(lag(mean_phenotype_pairwise_distance, 1))), phylo_pheno_100 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 10)), discretize(lag(mean_phenotype_pairwise_distance, 10))), phylo_pheno_1000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 100)), discretize(lag(mean_phenotype_pairwise_distance, 100))), phylo_pheno_10000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 1000)), discretize(lag(mean_phenotype_pairwise_distance, 1000))), phylo_pheno_100000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_num_taxa, 10000)), discretize(lag(mean_phenotype_pairwise_distance, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;\\nPhenotypic\\n\\t-&gt;\\nPhylogenetic\\n&quot;, TRUE ~ &quot;\\nPhylogenetic\\n\\t-&gt;\\nPhenotypic\\n&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.2.0.3 Mean pairwise distance and shannon diversity res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( phen_phylo_10 = condinformation(discretize(phen_diversity), discretize(lag(mean_phenotype_pairwise_distance, 1)), discretize(lag(phen_diversity, 1))), phen_phylo_100 = condinformation(discretize(phen_diversity), discretize(lag(mean_phenotype_pairwise_distance, 10)), discretize(lag(phen_diversity, 10))), pheno_phylo_1000 = condinformation(discretize(phen_diversity), discretize(lag(mean_phenotype_pairwise_distance, 100)), discretize(lag(phen_diversity, 100))), pheno_phylo_10000 = condinformation(discretize(phen_diversity), discretize(lag(mean_phenotype_pairwise_distance, 1000)), discretize(lag(phen_diversity, 1000))), pheno_phylo_100000 = condinformation(discretize(phen_diversity), discretize(lag(mean_phenotype_pairwise_distance, 10000)), discretize(lag(phen_diversity, 10000))), phylo_pheno_10 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_diversity, 1)), discretize(lag(mean_phenotype_pairwise_distance, 1))), phylo_pheno_100 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_diversity, 10)), discretize(lag(mean_phenotype_pairwise_distance, 10))), phylo_pheno_1000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_diversity, 100)), discretize(lag(mean_phenotype_pairwise_distance, 100))), phylo_pheno_10000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_diversity, 1000)), discretize(lag(mean_phenotype_pairwise_distance, 1000))), phylo_pheno_100000 = condinformation(discretize(mean_phenotype_pairwise_distance), discretize(lag(phen_diversity, 10000)), discretize(lag(mean_phenotype_pairwise_distance, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;\\nPhenotypic\\n\\t-&gt;\\nPhylogenetic\\n&quot;, TRUE ~ &quot;\\nPhylogenetic\\n\\t-&gt;\\nPhenotypic\\n&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.2.0.4 Mean evolutionary distinctiveness and phenotypic richness res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( phen_phylo_10 = condinformation( discretize(phen_num_taxa), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(phen_num_taxa, 1))), phen_phylo_100 = condinformation( discretize(phen_num_taxa), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(phen_num_taxa, 10))), pheno_phylo_1000 = condinformation( discretize(phen_num_taxa), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(phen_num_taxa, 100))), pheno_phylo_10000 = condinformation( discretize(phen_num_taxa), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000)), discretize(lag(phen_num_taxa, 1000))), pheno_phylo_100000 = condinformation( discretize(phen_num_taxa), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000)), discretize(lag(phen_num_taxa, 10000))), phylo_pheno_10 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_num_taxa, 1)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1))), phylo_pheno_100 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_num_taxa, 10)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10))), phylo_pheno_1000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_num_taxa, 100)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100))), phylo_pheno_10000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_num_taxa, 1000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000))), phylo_pheno_100000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_num_taxa, 10000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;\\nPhenotypic\\n\\t-&gt;\\nPhylogenetic\\n&quot;, TRUE ~ &quot;\\nPhylogenetic\\n\\t-&gt;\\nPhenotypic\\n&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) 8.2.0.5 Mean evolutionary distinctiveness and shannon diversity res &lt;- data %&gt;% group_by(directory, selection_name) %&gt;% summarise( phen_phylo_10 = condinformation( discretize(phen_diversity), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(phen_diversity, 1))), phen_phylo_100 = condinformation( discretize(phen_diversity), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(phen_diversity, 10))), pheno_phylo_1000 = condinformation( discretize(phen_diversity), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(phen_diversity, 100))), pheno_phylo_10000 = condinformation( discretize(phen_diversity), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000)), discretize(lag(phen_diversity, 1000))), pheno_phylo_100000 = condinformation( discretize(phen_diversity), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000)), discretize(lag(phen_diversity, 10000))), phylo_pheno_10 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_diversity, 1)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1))), phylo_pheno_100 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_diversity, 10)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10))), phylo_pheno_1000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_diversity, 100)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100))), phylo_pheno_10000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_diversity, 1000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1000))), phylo_pheno_100000 = condinformation( discretize(mean_phenotype_evolutionary_distinctiveness), discretize(lag(phen_diversity, 10000)), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10000))) ) # Turn Transfer Entropy columns into rows res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) # Pull lag into a column res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) # Make column indicating direction of transfer entropy res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;\\nPhenotypic\\n\\t-&gt;\\nPhylogenetic\\n&quot;, TRUE ~ &quot;\\nPhylogenetic\\n\\t-&gt;\\nPhenotypic\\n&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~selection_name) + scale_x_discrete(&quot;Lag&quot;,labels=c(&quot;10&quot;,&quot;&quot;,&quot;1000&quot;,&quot;&quot;,&quot;100000&quot;)) + scale_y_continuous(&quot;Transfer Entropy&quot;) + theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + scale_color_discrete(&quot;&quot;) "],["setup-1.html", "Chapter 9 Setup", " Chapter 9 Setup library(ggplot2) library(tidyverse) library(knitr) library(cowplot) library(viridis) library(RColorBrewer) library(rstatix) library(ggsignif) library(Hmisc) library(kableExtra) source(&quot;https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R&quot;) library(readr) library(stringr) library(ggpubr) library(infotheo) library(osfr) These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-apple-darwin17.0 ## arch x86_64 ## os darwin17.0 ## system x86_64, darwin17.0 ## status ## major 4 ## minor 1.1 ## year 2021 ## month 08 ## day 10 ## svn rev 80725 ## language R ## version.string R version 4.1.1 (2021-08-10) ## nickname Kick Things # Labeler for stats annotations p_label &lt;- function(p_value) { threshold = 0.0001 if (p_value &lt; threshold) { return(paste0(&quot;p &lt; &quot;, threshold)) } else { return(paste0(&quot;p = &quot;, p_value)) } } # Significance threshold alpha &lt;- 0.05 ####### misc ####### # Configure our default graphing theme theme_set(theme_cowplot()) osf_retrieve_file(&quot;p79hx&quot;) %&gt;% osf_download(conflicts = &quot;skip&quot;) # Download data from osf ## # A tibble: 1 × 4 ## name id local_path meta ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; ## 1 complex_fitness_landscapes.csv 612fe4d84e5ee5019e29292e ./complex_fit… &lt;named… data_loc &lt;- &quot;complex_fitness_landscapes.csv&quot; data &lt;- read_csv(data_loc, na=c(&quot;NONE&quot;, &quot;NA&quot;, &quot;&quot;)) data &lt;- data %&gt;% filter(N==20, generation %%10 == 0) %&gt;% mutate( selection_name = as.factor(case_when( SELECTION == 0 ~ &quot;Tournament&quot;, SELECTION == 1 ~ &quot;Fitness sharing&quot;, SELECTION == 2 ~ &quot;Lexicase&quot;, SELECTION == 3 ~ &quot;Eco-EA&quot;, SELECTION == 4 ~ &quot;Random&quot;, )), problem_name = as.factor(case_when( PROBLEM == 0 ~ &quot;NK Landscape&quot;, PROBLEM == 1 ~ &quot;Count Odds&quot;, PROBLEM == 2 ~ &quot;Real-valued optimization&quot;, PROBLEM == 3 ~ &quot;Sorting network&quot;, PROBLEM == 4 ~ &quot;Logic-9&quot; )) ) final_data &lt;- filter(data, generation==max(data$generation)) "],["performance-1.html", "Chapter 10 Performance 10.1 Over time 10.2 Final", " Chapter 10 Performance 10.1 Over time ggplot( data, aes( x=generation, y=max_performance, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) + facet_wrap(~problem_name, scales=&quot;free&quot;) 10.2 Final # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(max_performance ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) #stat.test$manual_position &lt;- stat.test$y.position * .5 #stat.test$manual_position &lt;- c(110, 150, 170, 170, 130, 110) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) ggplot( final_data, aes( x=selection_name, y=max_performance, fill=selection_name ) ) + geom_boxplot() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position=&quot;none&quot;) + facet_wrap(~problem_name, scales=&quot;free&quot;) stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label max_performance Eco-EA Fitness sharing 240 240 29310.5 7.37e-01 1.000000 ns 125237.4 Eco-EA , Fitness sharing 1 2 p = 1 max_performance Eco-EA Lexicase 240 240 23075.0 1.46e-04 0.001460 ** 178661.5 Eco-EA , Lexicase 1 3 p = 0.00146 max_performance Eco-EA Random 240 240 39696.5 0.00e+00 0.000000 **** 232085.6 Eco-EA, Random 1 4 p &lt; 1e-04 max_performance Eco-EA Tournament 240 240 29346.0 7.18e-01 1.000000 ns 285509.7 Eco-EA , Tournament 1 5 p = 1 max_performance Fitness sharing Lexicase 240 240 22328.5 2.01e-05 0.000201 *** 338933.8 Fitness sharing, Lexicase 2 3 p = 0.000201 max_performance Fitness sharing Random 240 240 41293.0 0.00e+00 0.000000 **** 392358.0 Fitness sharing, Random 2 4 p &lt; 1e-04 max_performance Fitness sharing Tournament 240 240 27500.5 3.92e-01 1.000000 ns 445782.1 Fitness sharing, Tournament 2 5 p = 1 max_performance Lexicase Random 240 240 44132.5 0.00e+00 0.000000 **** 499206.2 Lexicase, Random 3 4 p &lt; 1e-04 max_performance Lexicase Tournament 240 240 34831.5 6.61e-05 0.000661 *** 552630.3 Lexicase , Tournament 3 5 p = 0.000661 max_performance Random Tournament 240 240 18254.0 0.00e+00 0.000000 **** 606054.4 Random , Tournament 4 5 p &lt; 1e-04 "],["phylogenetic-diversity-1.html", "Chapter 11 Phylogenetic diversity 11.1 Over time 11.2 Final", " Chapter 11 Phylogenetic diversity 11.1 Over time ggplot( data, aes( x=generation, y=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_log10( name=&quot;Mean pairwise distance&quot; ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) + facet_wrap(~problem_name, scales = &quot;free&quot;) 11.2 Final # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(mean_phenotype_pairwise_distance ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) #stat.test$manual_position &lt;- stat.test$y.position * .5 #stat.test$manual_position &lt;- c(110, 150, 170, 170, 130, 110) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) ggplot( final_data, aes( x=selection_name, y=mean_phenotype_pairwise_distance, fill=selection_name ) ) + geom_boxplot() + scale_y_log10( name=&quot;Mean pairwise distance&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) + facet_wrap(~problem_name, scales = &quot;free&quot;) stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label mean_phenotype_pairwise_distance Eco-EA Fitness sharing 240 240 2831.0 0.00e+00 0.000000 **** 9718.758 Eco-EA , Fitness sharing 1 2 p &lt; 1e-04 mean_phenotype_pairwise_distance Eco-EA Lexicase 240 240 25159.0 1.70e-02 0.170000 ns 15104.178 Eco-EA , Lexicase 1 3 p = 0.17 mean_phenotype_pairwise_distance Eco-EA Random 240 240 9552.0 0.00e+00 0.000000 **** 20489.598 Eco-EA, Random 1 4 p &lt; 1e-04 mean_phenotype_pairwise_distance Eco-EA Tournament 240 240 43052.5 0.00e+00 0.000000 **** 25875.018 Eco-EA , Tournament 1 5 p &lt; 1e-04 mean_phenotype_pairwise_distance Fitness sharing Lexicase 240 240 33683.0 1.00e-03 0.010000 ** 31260.438 Fitness sharing, Lexicase 2 3 p = 0.01 mean_phenotype_pairwise_distance Fitness sharing Random 240 240 40738.0 0.00e+00 0.000000 **** 36645.858 Fitness sharing, Random 2 4 p &lt; 1e-04 mean_phenotype_pairwise_distance Fitness sharing Tournament 240 240 57314.0 0.00e+00 0.000000 **** 42031.278 Fitness sharing, Tournament 2 5 p &lt; 1e-04 mean_phenotype_pairwise_distance Lexicase Random 240 240 28272.0 8.49e-01 1.000000 ns 47416.698 Lexicase, Random 3 4 p = 1 mean_phenotype_pairwise_distance Lexicase Tournament 240 240 34801.0 7.84e-05 0.000784 *** 52802.118 Lexicase , Tournament 3 5 p = 0.000784 mean_phenotype_pairwise_distance Random Tournament 240 240 54927.0 0.00e+00 0.000000 **** 58187.538 Random , Tournament 4 5 p &lt; 1e-04 "],["phenotypic-diversity-1.html", "Chapter 12 Phenotypic diversity 12.1 Over time 12.2 Final", " Chapter 12 Phenotypic diversity 12.1 Over time ggplot( data, aes( x=generation, y=phenotype_num_taxa, color=selection_name, fill=selection_name ) ) + stat_summary(geom=&quot;line&quot;, fun=mean) + stat_summary( geom=&quot;ribbon&quot;, fun.data=&quot;mean_cl_boot&quot;, fun.args=list(conf.int=0.95), alpha=0.2, linetype=0 ) + scale_y_continuous( name=&quot;Phenotypic richness&quot; ) + scale_x_continuous( name=&quot;Generation&quot; ) + scale_color_discrete(&quot;Selection&quot;) + scale_fill_discrete(&quot;Selection&quot;) + facet_wrap(~problem_name, scales = &quot;free&quot;) 12.2 Final # Compute manual labels for geom_signif stat.test &lt;- final_data %&gt;% wilcox_test(phenotype_num_taxa ~ selection_name) %&gt;% adjust_pvalue(method = &quot;bonferroni&quot;) %&gt;% add_significance() %&gt;% add_xy_position(x=&quot;selection_name&quot;,step.increase=1) #stat.test$manual_position &lt;- stat.test$y.position * .5 #stat.test$manual_position &lt;- c(110, 150, 170, 170, 130, 110) stat.test$label &lt;- mapply(p_label,stat.test$p.adj) ggplot( final_data, aes( x=selection_name, y=phenotype_num_taxa, fill=selection_name ) ) + geom_boxplot() + scale_y_continuous( name=&quot;Phenotypic Richness&quot; ) + scale_x_discrete( name=&quot;Selection&quot; ) + scale_fill_discrete( name=&quot;Selection&quot; ) + scale_color_discrete( name=&quot;Selection&quot; ) + theme(legend.position = &quot;none&quot;) + facet_wrap(~problem_name, scales = &quot;free&quot;) stat.test %&gt;% kbl() %&gt;% kable_styling( bootstrap_options = c( &quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot; ) ) %&gt;% scroll_box(width=&quot;600px&quot;) .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif y.position groups xmin xmax label phenotype_num_taxa Eco-EA Fitness sharing 240 240 2406.0 0.000000 0.00000 **** 1507.000 Eco-EA , Fitness sharing 1 2 p &lt; 1e-04 phenotype_num_taxa Eco-EA Lexicase 240 240 14833.5 0.000000 0.00000 **** 2070.333 Eco-EA , Lexicase 1 3 p &lt; 1e-04 phenotype_num_taxa Eco-EA Random 240 240 34261.5 0.000326 0.00326 ** 2633.667 Eco-EA, Random 1 4 p = 0.00326 phenotype_num_taxa Eco-EA Tournament 240 240 29587.5 0.604000 1.00000 ns 3197.000 Eco-EA , Tournament 1 5 p = 1 phenotype_num_taxa Fitness sharing Lexicase 240 240 42195.5 0.000000 0.00000 **** 3760.333 Fitness sharing, Lexicase 2 3 p &lt; 1e-04 phenotype_num_taxa Fitness sharing Random 240 240 57231.0 0.000000 0.00000 **** 4323.667 Fitness sharing, Random 2 4 p &lt; 1e-04 phenotype_num_taxa Fitness sharing Tournament 240 240 51342.0 0.000000 0.00000 **** 4887.000 Fitness sharing, Tournament 2 5 p &lt; 1e-04 phenotype_num_taxa Lexicase Random 240 240 47218.0 0.000000 0.00000 **** 5450.333 Lexicase, Random 3 4 p &lt; 1e-04 phenotype_num_taxa Lexicase Tournament 240 240 43850.0 0.000000 0.00000 **** 6013.667 Lexicase , Tournament 3 5 p &lt; 1e-04 phenotype_num_taxa Random Tournament 240 240 25692.5 0.041000 0.41000 ns 6577.000 Random , Tournament 4 5 p = 0.41 "],["relationship-between-phenotypic-and-phylogenetic-diversity-1.html", "Chapter 13 Relationship between phenotypic and phylogenetic diversity", " Chapter 13 Relationship between phenotypic and phylogenetic diversity ggplot( final_data, aes( y=phenotype_num_taxa, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Phenotypic richness&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) "],["relationship-between-diversity-and-success-1.html", "Chapter 14 Relationship between diversity and success 14.1 Earlier in run 14.2 End of run", " Chapter 14 Relationship between diversity and success 14.1 Earlier in run ggplot( data %&gt;% filter(generation==500), aes( y=max_performance, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( data %&gt;% filter(generation==500), aes( y=max_performance, x=phenotype_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) phylogney_vs_performance &lt;- ggplot( data %&gt;% filter(generation==1000), aes( y=max_performance, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) phylogney_vs_performance ggplot( data %&gt;% filter(generation==1000), aes( y=max_performance, x=phenotype_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) 14.2 End of run ggplot( final_data, aes( y=max_performance, x=mean_phenotype_pairwise_distance, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Mean pairwise distance&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) ggplot( final_data, aes( y=max_performance, x=phenotype_num_taxa, color=selection_name, fill=selection_name ) ) + geom_point() + scale_y_continuous( name=&quot;Average trait performance&quot; ) + scale_x_continuous( name=&quot;Phenotypic richness&quot; ) + facet_wrap( ~selection_name*problem_name, scales=&quot;free&quot; ) + stat_smooth( method=&quot;lm&quot; ) + stat_cor( method=&quot;spearman&quot;, cor.coef.name = &quot;rho&quot;, color=&quot;black&quot; ) + theme(legend.position = &quot;none&quot;) "],["causality-analysis-1.html", "Chapter 15 Causality analysis", " Chapter 15 Causality analysis res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(max_performance), discretize(lag(max_phenotype_pairwise_distance, 1)), discretize(lag(max_performance, 1))), fit_phylo_100 = condinformation(discretize(max_performance), discretize(lag(max_phenotype_pairwise_distance, 10)), discretize(lag(max_performance, 10))), fit_phylo_1000 = condinformation(discretize(max_performance), discretize(lag(max_phenotype_pairwise_distance, 100)), discretize(lag(max_performance, 100))), fit_pheno_10 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_performance, 1))), fit_pheno_100 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_performance, 10))), fit_pheno_1000 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_performance, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_pairwise_distance, 1)), discretize(lag(max_performance, 1))), fit_phylo_100 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_pairwise_distance, 10)), discretize(lag(max_performance, 10))), fit_phylo_1000 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_pairwise_distance, 100)), discretize(lag(max_performance, 100))), fit_pheno_10 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_performance, 1))), fit_pheno_100 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_performance, 10))), fit_pheno_1000 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_performance, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(max_performance, 1))), fit_phylo_100 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(max_performance, 10))), fit_phylo_1000 = condinformation(discretize(max_performance), discretize(lag(mean_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(max_performance, 100))), fit_pheno_10 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_performance, 1))), fit_pheno_100 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_performance, 10))), fit_pheno_1000 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_performance, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( fit_phylo_10 = condinformation(discretize(max_performance), discretize(lag(variance_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(max_performance, 1))), fit_phylo_100 = condinformation(discretize(max_performance), discretize(lag(variance_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(max_performance, 10))), fit_phylo_1000 = condinformation(discretize(max_performance), discretize(lag(variance_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(max_performance, 100))), fit_pheno_10 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_performance, 1))), fit_pheno_100 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_performance, 10))), fit_pheno_1000 = condinformation(discretize(max_performance), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_performance, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;o_10&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo&quot;) ~ &quot;Phylogenetic&quot;, TRUE ~ &quot;Phenotypic&quot;) ggplot( res %&gt;% filter(str_detect(name, &quot;fit_ph*&quot;)), aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( phen_phylo_10 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 1)), discretize(lag(phenotype_num_taxa, 1))), phen_phylo_100 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 10)), discretize(lag(phenotype_num_taxa, 10))), pheno_phylo_1000 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_pairwise_distance, 100)), discretize(lag(phenotype_num_taxa, 100))), phylo_pheno_10 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_phenotype_pairwise_distance, 1))), phylo_pheno_100 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_phenotype_pairwise_distance, 10))), phylo_pheno_1000 = condinformation(discretize(max_phenotype_pairwise_distance), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_phenotype_pairwise_distance, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;Phenotypic -&gt; Phylogenetic&quot;, TRUE ~ &quot;Phylogenetic -&gt; Phenotypic&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) res &lt;- data %&gt;% group_by(SEED, selection_name, problem_name) %&gt;% summarise( phen_phylo_10 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_evolutionary_distinctiveness, 1)), discretize(lag(phenotype_num_taxa, 1))), phen_phylo_100 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_evolutionary_distinctiveness, 10)), discretize(lag(phenotype_num_taxa, 10))), pheno_phylo_1000 = condinformation(discretize(phenotype_num_taxa), discretize(lag(max_phenotype_evolutionary_distinctiveness, 100)), discretize(lag(phenotype_num_taxa, 100))), phylo_pheno_10 = condinformation(discretize(max_phenotype_evolutionary_distinctiveness), discretize(lag(phenotype_num_taxa, 1)), discretize(lag(max_phenotype_evolutionary_distinctiveness, 1))), phylo_pheno_100 = condinformation(discretize(max_phenotype_evolutionary_distinctiveness), discretize(lag(phenotype_num_taxa, 10)), discretize(lag(max_phenotype_evolutionary_distinctiveness, 10))), phylo_pheno_1000 = condinformation(discretize(max_phenotype_evolutionary_distinctiveness), discretize(lag(phenotype_num_taxa, 100)), discretize(lag(max_phenotype_evolutionary_distinctiveness, 100))) ) res &lt;- res %&gt;% pivot_longer(cols=contains(&quot;phylo&quot;)) res$offset &lt;- str_extract(res$name, &quot;[:digit:]*$&quot;) res$Type &lt;- case_when(str_detect(res$name, &quot;phylo_pheno&quot;) ~ &quot;Phenotypic -&gt; Phylogenetic&quot;, TRUE ~ &quot;Phylogenetic -&gt; Phenotypic&quot;) ggplot( res, aes( x=as.factor(offset), y=value, color=Type ) ) + geom_boxplot() + facet_wrap(~problem_name*selection_name) + scale_x_discrete(&quot;Lag&quot;) + scale_y_continuous(&quot;Transfer Entropy&quot;) + scale_color_discrete(&quot;&quot;) + theme(legend.position = &quot;bottom&quot;) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
